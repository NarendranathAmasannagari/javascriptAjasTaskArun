1.for in :-

The for...in loop in JavaScript is used to iterate over the properties (keys) of an object.

Key Points:-

Purpose: Loop through the keys of an object.

Syntax: for (variable in object) { statement }

variable: Holds the current key.

object: The object whose keys you want to iterate over.

statement: Code to execute for each key.

Example

javascript

const obj = { a: 1, b: 2, c: 3 };

for (const key in obj) {
  console.log(`${key}: ${obj[key]}`);
}

// Output:

// a: 1
// b: 2
// c: 3

Notes

Includes Inherited Properties: It will also iterate over properties from the object's prototype chain.
Use with Caution: For arrays, it's better to use for...of or array methods like .forEach() to avoid unexpected behavior.


2.for of :-

The for...of loop in JavaScript is a simple and effective way to iterate over iterable objects, 
such as arrays, strings, maps, sets, and more. Hereâ€™s a breakdown of how it works:

Syntax

for (const element of iterable) {
    // Code to execute for each element
}

Key Points

Iterables: The for...of loop can be used with any iterable object, including:

.Arrays
.Strings
.Maps
.Sets

Element: In each iteration, the element variable holds the current value from the iterable.

Readability: It provides a more readable and concise way to loop through elements compared to traditional for loops.

Example

const fruits = ['apple', 'banana', 'cherry'];

for (const fruit of fruits) {
    console.log(fruit);
}

output:-

apple
banana
cherry

note:- In this example, the loop iterates over each fruit in the fruits array and logs it to the console.

#3. objects 


In JavaScript, objects are a fundamental data type that allows you to store collections of data and more complex entities.

What is an Object?

Definition: An object is a collection of key-value pairs, where each key is a string (or Symbol) and each value can be any data type (including other objects, arrays, functions, etc.).

Syntax: Objects are defined using curly braces {}.

Creating an Object

You can create an object in several ways:

Object Literal:

const person = {
    name: "John",
    age: 30,
    isStudent: false
};


Using the new Object() Constructor:

const car = new Object();
car.make = "Toyota";
car.model = "Camry";
car.year = 2020;

Accessing Object Properties

You can access the properties of an object using:

Dot Notation:

console.log(person.name); // Output: John


Bracket Notation

console.log(person["age"]); // Output: 30

Adding or Modifying Properties

You can add or modify properties like this:

person.email = "john@example.com"; // Adding a new property
person.age = 31; // Modifying an existing property

Example of a Function in an Object

Objects can also contain functions, known as methods:

const dog = {
    name: "Buddy",
    bark: function() {
        console.log("Woof!");
    }
};

dog.bark(); // Output: Woof!


Summary

.Objects are key-value pairs.
.They can store various data types.
.You can access, modify, and add properties easily.

